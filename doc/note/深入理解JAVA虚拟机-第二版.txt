第一部分：走进java
第一章 走进java
JRE： java-se-api子集和java虚拟机。
JDK： java程序设计，java-api类库，java虚拟机。

第二部分：自动内存管理机制
第二章 java内存区域与内存溢出异常
内存区域：
1.程序计数器，当前线程执行字节码的行号指示器。唯一一个没有OutOfMemoryError情况的区域。
2.java虚拟机栈，当前线程存储局部变量表的内存空间。编译期间完成确定的内存分配。不会随运行改变。规定了两种异常：
当线程请求的栈深度大于虚拟机允许的深度，抛出StackOverflowError。
如果虚拟机栈可以动态扩展，当扩展无法申请到足够的内存，抛出OutOfMemoryError。
3.本地方法栈，与java虚拟机栈类似。有些虚拟机会把java虚拟机和本地方法栈合二为一。
4.java堆，所有线程共享的内存区，对象分配存放区。可固定和扩展的设置大小。 -Xmx -Xms设置。
当无法扩展时，抛出OutOfMemoryError
5.方法区，所有线程共享，存放类加载信息，常量，静态变量等。也叫非堆以示区分。当方法区无法满足内存分配时抛出OutOfMemoryError
内存溢出实战：
访问对象的方式有句柄和指针。指针更快一步。句柄在对象变动时不用改变reference。
--堆内存溢出(-Xms 20m -Xmx 20m 最小最大相同时不会扩展。 -XX +HeapDumpOnOutOfMemoryError 打印快照)：
java.lang.OutOfMemoryError: Java heap space 检查GC Roots引用链，看是否是没有回收，或者对象还有使用。
--虚拟机栈和本地方法栈溢出(-Xss 128k)：
单线程只会出现java.lang.StackOverflowError. 
多线程会出现java.lang.OutOfMemoryError 。进程内存-最大堆-最大方法区=虚拟机栈和本地方法栈。
每个线程分配到的内存越大，建立的线程就越少。可以通过减少最大堆和减少栈容量来换取创建更多的线程。
--方法区和运行时常量池溢出
jdk1.6常量池分配在永久代中，可以通过 -XX:PermSize=10M -XX:MaxPermSize=10M 限制方法区大小。
java.lang.OutOfMemoryError PermGen space
--本机直接内存溢出(-XX：)：MaxDirectMemorySize=10m
Heap Dump中不会有明显异常，Dump文件很小，又使用了NIO。则可能是本机直接内存溢出。

第三章 垃圾收集器和内存分配策略
1.对象引用：
java是采用的可达性分析算法(GC Roots链)判断对象是否存活需要垃圾回收，并不是引用计数法。
GC Roots ：虚拟机栈中引用的对象，方法区中静态属性引用的对象，方法区中常量引用的对象，本地方法(native)引用的对象。
引用并非单纯的reference类型存储的地址是另外一块内存的起始地址。JDK1.2后分为强引用，软引用，弱引用，虚引用四种。
生存和死亡规则，GC Roots链没有引用时，当前没有覆盖finalize方法或已经被虚拟机调用过一次。就会回收。finalize方法只会被调用一次，
对象有一次逃脱机会。但是不建议使用finalize方法。
方法区回收，有些没有垃圾回收，效率不高，一般新生代区一次回收能回收70-95%的空间。而永久代回收效果差。且回收条件判断比较麻烦。
2.垃圾回收算法：
--标记清除法：效率不高，回收后内存存在碎片。
--复制算法：分成均等的两块内存，存活的复制到一块上。另一块全部清除，效率高，内存不存在碎片。但是只有一半的内存能使用。代价太大了。
但是改进后可以分成三块内存空间，80%(Eden区) 10%(survivor)10%。用一小块存储存活对象。但是存在风险。需要额外的空间进行担保。适合新生代对象。
--标记整理算法：类似标记清除，区别是让存活对象都向一端移动，保证内存连续性。适合老年代对象。
--分代收集算法：结合复制算法和标记整理算法。把堆分成几块分别实现垃圾收集算法。
3.垃圾回收器实现：
--Serial收集器：单线程收集，高效，但是会停顿。Client模式下可以选择。
--ParNew收集器：能配合CMS收集器收集新生代对象。多核优势。
--CMS(concurrent mark sweep)收集器：最短停顿时间为目标的收集器。适合B/S互联网。
初始标记，并发标记，重新标记，并发清除。对CPU要求比较高，无法处理浮动垃圾，清除后没有整理内存会存在碎片。通过参数设置整理内存碎片。
--G1收集器：替代CMS收集器，高效的并行和并发，分代收集，空间整合，由清除变成清理，可预测的停顿。
4.GC日志：
33.125：  GC           DefNew  3324k-152k(3712k) 0.0025925secs     3324k-152k(11904k) 0.0031680 secs
发生时间   GC停顿类型    GC区域   GC前该内存区域已使用大小到回收后已使用大小(该区域总大小) GC时间
							  GC前java堆已使用大小到回收后已使用大小(java堆总大小)
垃圾收集器参数配置查手册
5.内存分配与回收：
新时代进入Eden区(大块区) 当没有空间时发生一次GC
大对象直接进入老年代 长期存活的对象进入老年代 
没有固定的收集器和参数组合，也没有最优的调优方法。也没有必然的回收方法。
根据需求，选择虚拟机提供的不同收集器，大量的调节参数。获得最高性能。

第四章 虚拟机性能监控与故障处理
1.JDK命令攻击：
jps:虚拟机进程状况工具 jps -lv 显示本地虚拟机唯一ID(LVMID)。对本地虚拟机来说LVMID与操作系统进程(PID)一致。也可用PS查询出来。
但是当有多个虚拟机进程，无法根据进程名称d定位，只能通过jps显示主类的功能区分。
jstat:虚拟机统计信息监视工具 jstat -gcutil 4604
jinfo:java配置信息工具 jinfo -flag  NewSize  4604
jmap:java内存映像工具 jmap -head 4604 //  jmap -dump:format=b,file=eclipse.bin 4604
jhat:虚拟机堆转储快照分析工具(不实用，每可视化分析工具好用)
jstack:java堆栈跟踪工具 jstack -l 4604
2.可视化分析工具 VisualVM JConsole Eclipse插件Memory Analyzer Tool(MAT)
3.HSDIS：JIT生成代码反汇编。生成汇编代码。

第五章 调优案列分析与实战
案列1：64位虚拟机变更成32位虚拟机集群。
高性能硬件部署，通过64位虚拟机来使用大内存 通过若干个32位虚拟机建立集群逻辑来利用硬件资源。
控制Full GC频率关键的因素是看大多数对象是否朝生夕灭。大对象不能长时间生存，批量生产。这样老年代空间才稳定。
64位虚拟机面临如下问题：
内存回收导致的长时间停顿
64位虚拟机性能测试不如32位虚拟机
要保证程序稳定，不能堆溢出，不然10几G的dump文件无法分析
64位虚拟机内存消耗比32位大。由于指针膨胀和数据类型对齐补充引起的。
所以一般是一台物理机，启用多个应用服务进程，为每个进程分配端口。再在前端搭建一个负载均衡。
案列2：内存溢出时分析headdump文件，查看那些大对象长时间占用内存
案列3：本机直接内存溢出(没有生产headdump文件) 可以通过 -XX：MaxDirectMemorySize动态调整大小，内存不足时抛出OutOfMemoryError
线程堆栈可以通过-Xss调整。纵向无法分配栈帧抛出StackOverflowError 横向无法分配建立新的线程抛出OutOfMemoryError
案列4：Eclipse运行速度调优

第三部分： 虚拟机执行子系统 
第六章 类文件结构

第七章 虚拟机类加载机制
启动类加载器 bootstrap classload --  extension classload  --  application classload  --  user classload 
双亲委托类加载模式，都会先上传递加载。

第八章 虚拟机字节码执行引擎
第九章 类加载及执行子系统的案列与实战
java逆向移植 JDK1.5写的代码放到1.4，1.3上面部署。
实战：在服务器端实现执行临时代码的功能 比如上传JSP到服务端，在页面执行访问JSP

第四部分 程序编译与代码优化
第十章 早期(预编译)优化
1.前端编译器  java-class
泛型与类型擦除。通过class反编译可以发现是伪泛型。自动装箱拆箱与foreach循环
实战：插入式注解处理器
2.后端运行编译器  class-机器码
3.静态提前编译器  java-机器码

第十一章 晚期(运行期)优化

第五部分 高效并发
第十二章 java内存模型与线程
JSR133 主内存和工作内存
变量存储在主内存，工作内存是一份拷贝，如何同步到主内存。java内存模型定义了8种操作来完成。每一种操作都是原子的。
lock 锁定 主内存，把一个变量标识为一个线程独占状态。
unloc 解锁 主内存，把一个锁定变量释放出来
read 读取 主内存，把变量读到工作内存中
load 载入 工作内存，把read的变量拷贝到工作内存中
use 使用 工作内存，把工作内存的变量传递给执行引擎，供虚拟机使用
assign 赋值 工作内存，赋值给这个工作内存的变量
store 存储 工作内存，把工作内存的变量传送到主内存
write 写入 主内存，把store操作的工作内存变量写入主内存变量

volatile变量：
只保证对所有线程的可见性 
1.运算结果不依赖变量的当前值，或者能保证只有一个线程修改变量的值
2.变量不需要与其他状态变量共同参与不变约束
禁止指令重排序优化
DCL双重检索单例模式。JDK1.5修复了volatile。

原子性 可见性 有序性
atomicity
visibility
ordering

java与线程
线程是比进程更轻量级的调度执行单位，可以把进程的资源与调度分开，各个线程可以共享进程资源(内存，IO)，又可以独立调度(CPU)

第十三章 线程安全与锁优化
加同步  比较交换CAS ABA问题  


CPU最高
top -Hp pid

16进制转换
printf "%x\n" tid

堆栈
./jstack pid |grep tid


数量大小
./jmap -histo 18372|grep fuiou |sort -k 2 -g -r|less

内存大小
./jmap -histo 18372|head -10

jvm内存配置：
-XX:+<option>  开启option参数
-XX:-<option>  关闭option参数
-XX:<option>=<value>  将option参数的值设置为value

JAVA_OPTS="$JAVA_OPTS -server -Xms3G -Xmx3G -Xss256k -XX:PermSize=128m -XX:MaxPermSize=128m -XX:+UseParallelOldGC 
-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/aaa/dump -XX:+PrintGCDetails -XX:+PrintGCTimeStamps 
-Xloggc:/usr/aaa/dump/heap_trace.txt -XX:NewSize=1G -XX:MaxNewSize=1G"

 JAVA_OPTS="-Xms2000m -Xmx8024m -XX:PermSize=256M -XX:MaxPermSize=1024m -XX:+DisableExplicitGC -XX:+HeapDumpOnOutOfMemoryError
  -XX:HeapDumpPath=/home/fy_pay/tomcat7.0.12/jvm/dump/ 
  -Xloggc:/home/fy_pay/tomcat7.0.12/jvm/gc/gc.log -XX:+PrintGC -XX:+PrintGCDetails -XX:+PrintGCDateStamps"
  
-XX:+DisableExplicitGC 忽略系统System.gc()调用,默认关闭 +就是开启
-Xms2000m -Xmx4048m   初始堆大小   最大堆大小
-XX:PermSize=64M -XX:MaxPermSize=128m      持久代


一、JVM内存模型及垃圾收集算法
 1.根据Java虚拟机规范，JVM将内存划分为：
New（年轻代）
Tenured（年老代）
永久代（Perm）
  其中New和Tenured属于堆内存，堆内存会从JVM启动参数（-Xmx:3G）指定的内存中分配，Perm不属于堆内存，有虚拟机直接分配，但可以通过-XX:PermSize -XX:MaxPermSize 等参数调整其大小。
年轻代（New）：年轻代用来存放JVM刚分配的Java对象
年老代（Tenured)：年轻代中经过垃圾回收没有回收掉的对象将被Copy到年老代
永久代（Perm）：永久代存放Class、Method元信息，其大小跟项目的规模、类、方法的量有关，一般设置为128M就足够，设置原则是预留30%的空间。
New又分为几个部分：
Eden：Eden用来存放JVM刚分配的对象
Survivor1
Survivro2：两个Survivor空间一样大，当Eden中的对象经过垃圾回收没有被回收掉时，会在两个Survivor之间来回Copy，当满足某个条件，比如Copy次数，就会被Copy到Tenured。显然，Survivor只是增加了对象在年轻代中的逗留时间，增加了被垃圾回收的可能性。
 2.垃圾回收算法
  垃圾回收算法可以分为三类，都基于标记-清除（复制）算法：
Serial算法（单线程）
并行算法
并发算法
  JVM会根据机器的硬件配置对每个内存代选择适合的回收算法，比如，如果机器多于1个核，会对年轻代选择并行算法，关于选择细节请参考JVM调优文档。
  稍微解释下的是，并行算法是用多线程进行垃圾回收，回收期间会暂停程序的执行，而并发算法，也是多线程回收，但期间不停止应用执行。所以，并发算法适用于交互性高的一些程序。经过观察，并发算法会减少年轻代的大小，其实就是使用了一个大的年老代，这反过来跟并行算法相比吞吐量相对较低。
  还有一个问题是，垃圾回收动作何时执行？
当年轻代内存满时，会引发一次普通GC，该GC仅回收年轻代。需要强调的时，年轻代满是指Eden代满，Survivor满不会引发GC
当年老代满时会引发Full GC，Full GC将会同时回收年轻代、年老代
当永久代满时也会引发Full GC，会导致Class、Method元信息的卸载
  另一个问题是，何时会抛出OutOfMemoryException，并不是内存被耗空的时候才抛出
JVM98%的时间都花费在内存回收
每次回收的内存小于2%
  满足这两个条件将触发OutOfMemoryException，这将会留给系统一个微小的间隙以做一些Down之前的操作，比如手动打印Heap Dump。
二、内存泄漏及解决方法
 1.系统崩溃前的一些现象：
每次垃圾回收的时间越来越长，由之前的10ms延长到50ms左右，FullGC的时间也有之前的0.5s延长到4、5s
FullGC的次数越来越多，最频繁时隔不到1分钟就进行一次FullGC
年老代的内存越来越大并且每次FullGC后年老代没有内存被释放
 之后系统会无法响应新的请求，逐渐到达OutOfMemoryError的临界值。
 2.生成堆的dump文件
 通过JMX的MBean生成当前的Heap信息，大小为一个3G（整个堆的大小）的hprof文件，如果没有启动JMX可以通过Java的jmap命令来生成该文件。
 3.分析dump文件
 下面要考虑的是如何打开这个3G的堆信息文件，显然一般的Window系统没有这么大的内存，必须借助高配置的Linux。当然我们可以借助X-Window把Linux上的图形导入到Window。我们考虑用下面几种工具打开该文件：
Visual VM
IBM HeapAnalyzer
JDK 自带的Hprof工具
 使用这些工具时为了确保加载速度，建议设置最大内存为6G。使用后发现，这些工具都无法直观地观察到内存泄漏，Visual VM虽能观察到对象大小，但看不到调用堆栈；HeapAnalyzer虽然能看到调用堆栈，却无法正确打开一个3G的文件。因此，我们又选用了Eclipse专门的静态内存分析工具：Mat。
 4.分析内存泄漏
 通过Mat我们能清楚地看到，哪些对象被怀疑为内存泄漏，哪些对象占的空间最大及对象的调用关系。针对本案，在ThreadLocal中有很多的JbpmContext实例，经过调查是JBPM的Context没有关闭所致。
 另，通过Mat或JMX我们还可以分析线程状态，可以观察到线程被阻塞在哪个对象上，从而判断系统的瓶颈。
 5.回归问题
   Q：为什么崩溃前垃圾回收的时间越来越长？
   A:根据内存模型和垃圾回收算法，垃圾回收分两部分：内存标记、清除（复制），标记部分只要内存大小固定时间是不变的，变的是复制部分，因为每次垃圾回收都有一些回收不掉的内存，所以增加了复制量，导致时间延长。所以，垃圾回收的时间也可以作为判断内存泄漏的依据
   Q：为什么Full GC的次数越来越多？
   A：因此内存的积累，逐渐耗尽了年老代的内存，导致新对象分配没有更多的空间，从而导致频繁的垃圾回收
   Q:为什么年老代占用的内存越来越大？
   A:因为年轻代的内存无法被回收，越来越多地被Copy到年老代
三、性能调优
 除了上述内存泄漏外，我们还发现CPU长期不足3%，系统吞吐量不够，针对8core×16G、64bit的Linux服务器来说，是严重的资源浪费。
 在CPU负载不足的同时，偶尔会有用户反映请求的时间过长，我们意识到必须对程序及JVM进行调优。从以下几个方面进行：
线程池：解决用户响应时间长的问题
连接池
JVM启动参数：调整各代的内存比例和垃圾回收算法，提高吞吐量
程序算法：改进程序逻辑算法提高性能
  1.Java线程池（java.util.concurrent.ThreadPoolExecutor）
    大多数JVM6上的应用采用的线程池都是JDK自带的线程池，之所以把成熟的Java线程池进行罗嗦说明，是因为该线程池的行为与我们想象的有点出入。Java线程池有几个重要的配置参数：
corePoolSize：核心线程数（最新线程数）
maximumPoolSize：最大线程数，超过这个数量的任务会被拒绝，用户可以通过RejectedExecutionHandler接口自定义处理方式
keepAliveTime：线程保持活动的时间
workQueue：工作队列，存放执行的任务
    Java线程池需要传入一个Queue参数（workQueue）用来存放执行的任务，而对Queue的不同选择，线程池有完全不同的行为：
SynchronousQueue： 一个无容量的等待队列，一个线程的insert操作必须等待另一线程的remove操作，采用这个Queue线程池将会为每个任务分配一个新线程
LinkedBlockingQueue ： 无界队列，采用该Queue，线程池将忽略 maximumPoolSize参数，仅用corePoolSize的线程处理所有的任务，未处理的任务便在LinkedBlockingQueue中排队
ArrayBlockingQueue： 有界队列，在有界队列和 maximumPoolSize的作用下，程序将很难被调优：更大的Queue和小的maximumPoolSize将导致CPU的低负载；小的Queue和大的池，Queue就没起动应有的作用。
    其实我们的要求很简单，希望线程池能跟连接池一样，能设置最小线程数、最大线程数，当最小数<任务<最大数时，应该分配新的线程处理；当任务>最大数时，应该等待有空闲线程再处理该任务。
    但线程池的设计思路是，任务应该放到Queue中，当Queue放不下时再考虑用新线程处理，如果Queue满且无法派生新线程，就拒绝该任务。设计导致“先放等执行”、“放不下再执行”、“拒绝不等待”。所以，根据不同的Queue参数，要提高吞吐量不能一味地增大maximumPoolSize。
    当然，要达到我们的目标，必须对线程池进行一定的封装，幸运的是ThreadPoolExecutor中留了足够的自定义接口以帮助我们达到目标。我们封装的方式是：
以SynchronousQueue作为参数，使maximumPoolSize发挥作用，以防止线程被无限制的分配，同时可以通过提高maximumPoolSize来提高系统吞吐量
自定义一个RejectedExecutionHandler，当线程数超过maximumPoolSize时进行处理，处理方式为隔一段时间检查线程池是否可以执行新Task，如果可以把拒绝的Task重新放入到线程池，检查的时间依赖keepAliveTime的大小。
  2.连接池（org.apache.commons.dbcp.BasicDataSource）
    在使用org.apache.commons.dbcp.BasicDataSource的时候，因为之前采用了默认配置，所以当访问量大时，通过JMX观察到很多Tomcat线程都阻塞在BasicDataSource使用的Apache ObjectPool的锁上，直接原因当时是因为BasicDataSource连接池的最大连接数设置的太小，默认的BasicDataSource配置，仅使用8个最大连接。
    我还观察到一个问题，当较长的时间不访问系统，比如2天，DB上的Mysql会断掉所以的连接，导致连接池中缓存的连接不能用。为了解决这些问题，我们充分研究了BasicDataSource，发现了一些优化的点：
Mysql默认支持100个链接，所以每个连接池的配置要根据集群中的机器数进行，如有2台服务器，可每个设置为60
initialSize：参数是一直打开的连接数
minEvictableIdleTimeMillis：该参数设置每个连接的空闲时间，超过这个时间连接将被关闭
timeBetweenEvictionRunsMillis：后台线程的运行周期，用来检测过期连接
maxActive：最大能分配的连接数
maxIdle：最大空闲数，当连接使用完毕后发现连接数大于maxIdle，连接将被直接关闭。只有initialSize < x < maxIdle的连接将被定期检测是否超期。这个参数主要用来在峰值访问时提高吞吐量。
initialSize是如何保持的？经过研究代码发现，BasicDataSource会关闭所有超期的连接，然后再打开initialSize数量的连接，这个特性与minEvictableIdleTimeMillis、timeBetweenEvictionRunsMillis一起保证了所有超期的initialSize连接都会被重新连接，从而避免了Mysql长时间无动作会断掉连接的问题。
  3.JVM参数
    在JVM启动参数中，可以设置跟内存、垃圾回收相关的一些参数设置，默认情况不做任何设置JVM会工作的很好，但对一些配置很好的Server和具体的应用必须仔细调优才能获得最佳性能。通过设置我们希望达到一些目标：
GC的时间足够的小
GC的次数足够的少
发生Full GC的周期足够的长
  前两个目前是相悖的，要想GC时间小必须要一个更小的堆，要保证GC次数足够少，必须保证一个更大的堆，我们只能取其平衡。
   （1）针对JVM堆的设置一般，可以通过-Xms -Xmx限定其最小、最大值，为了防止垃圾收集器在最小、最大之间收缩堆而产生额外的时间，我们通常把最大、最小设置为相同的值
   （2）年轻代和年老代将根据默认的比例（1：2）分配堆内存，可以通过调整二者之间的比率NewRadio来调整二者之间的大小，也可以针对回收代，比如年轻代，通过 -XX:newSize -XX:MaxNewSize来设置其绝对大小。同样，为了防止年轻代的堆收缩，我们通常会把-XX:newSize -XX:MaxNewSize设置为同样大小
   （3）年轻代和年老代设置多大才算合理？这个我问题毫无疑问是没有答案的，否则也就不会有调优。我们观察一下二者大小变化有哪些影响
更大的年轻代必然导致更小的年老代，大的年轻代会延长普通GC的周期，但会增加每次GC的时间；小的年老代会导致更频繁的Full GC
更小的年轻代必然导致更大年老代，小的年轻代会导致普通GC很频繁，但每次的GC时间会更短；大的年老代会减少Full GC的频率
如何选择应该依赖应用程序对象生命周期的分布情况：如果应用存在大量的临时对象，应该选择更大的年轻代；如果存在相对较多的持久对象，年老代应该适当增大。但很多应用都没有这样明显的特性，在抉择时应该根据以下两点：（A）本着Full GC尽量少的原则，让年老代尽量缓存常用对象，JVM的默认比例1：2也是这个道理 （B）通过观察应用一段时间，看其他在峰值时年老代会占多少内存，在不影响Full GC的前提下，根据实际情况加大年轻代，比如可以把比例控制在1：1。但应该给年老代至少预留1/3的增长空间
  （4）在配置较好的机器上（比如多核、大内存），可以为年老代选择并行收集算法： -XX:+UseParallelOldGC ，默认为Serial收集
  （5）线程堆栈的设置：每个线程默认会开启1M的堆栈，用于存放栈帧、调用参数、局部变量等，对大多数应用而言这个默认值太了，一般256K就足用。理论上，在内存不变的情况下，减少每个线程的堆栈，可以产生更多的线程，但这实际上还受限于操作系统。
  （4）可以通过下面的参数打Heap Dump信息
-XX:HeapDumpPath
-XX:+PrintGCDetails
-XX:+PrintGCTimeStamps
-Xloggc:/usr/aaa/dump/heap_trace.txt
    通过下面参数可以控制OutOfMemoryError时打印堆的信息
-XX:+HeapDumpOnOutOfMemoryError
 请看一下一个时间的Java参数配置：（服务器：Linux 64Bit，8Core×16G）
 JAVA_OPTS="$JAVA_OPTS -server -Xms3G -Xmx3G -Xss256k -XX:PermSize=128m -XX:MaxPermSize=128m -XX:+UseParallelOldGC -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/aaa/dump -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:/usr/aaa/dump/heap_trace.txt -XX:NewSize=1G -XX:MaxNewSize=1G"
经过观察该配置非常稳定，每次普通GC的时间在10ms左右，Full GC基本不发生，或隔很长很长的时间才发生一次
通过分析dump文件可以发现，每个1小时都会发生一次Full GC，经过多方求证，只要在JVM中开启了JMX服务，JMX将会1小时执行一次Full GC以清除引用，关于这点请参考附件文档。





