<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<settings>
		<setting name="logImpl" value="LOG4J" />
		<!-- 1 在Mybatis的配置文件中开启一级缓存。 <setting name="localCacheScope" value="SESSION"/> 
			STATEMENT Mybatis一级缓存的生命周期和SqlSession一致。 Mybatis的缓存是一个粗粒度的缓存，没有更新缓存和缓存过期的概念，同时只是使用了默认的hashmap，也没有做容量上的限定。 
			Mybatis的一级缓存最大范围是SqlSession内部，有多个SqlSession或者分布式的环境下，有操作数据库写的话，会引起脏数据， 建议是把一级缓存的默认级别设定为Statement，即不使用一级缓存。 -->

		<!-- 二级缓存 1 在Mybatis的配置文件中开启二级缓存。 <setting name="cacheEnabled" value="true"/> 
		2 在Mybatis的映射XML中配置cache或者 cache-ref <cache/> Mybatis的二级缓存相对于一级缓存来说，实现了SqlSession之间缓存数据的共享，同时粒度更加的细，能够到Mapper级别， 
		通过Cache接口实现类不同的组合，对Cache的可控性也更强。 Mybatis在多表查询时，极大可能会出现脏数据，有设计上的缺陷，安全使用的条件比较苛刻。 
		在分布式环境下，由于默认的Mybatis Cache实现都是基于本地的，分布式环境下必然会出现读取到脏数据， 需要使用集中式缓存将Mybatis的Cache接口实现，有一定的开发成本，不如直接用Redis，Memcache实现业务上的缓存就好了。 
		最终的结论是Mybatis的缓存机制设计的不是很完善，在使用上容易引起脏数据问题，个人建议不要使用Mybatis缓存， 在业务层面上使用其他机制实现需要的缓存功能，让Mybatis做它的ORM框架就好。 -->
	</settings>

	<typeAliases>
		<typeAlias alias="User" type="com.bingbing.bingxue.entity.User" />
		<typeAlias alias="Card" type="com.bingbing.bingxue.entity.Card" />
	</typeAliases>

</configuration>